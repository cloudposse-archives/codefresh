version: '1.0'

stages:
  - Prepare
  - Build
  - Test
  - Deploy

steps:

  main_clone:
    # https://codefresh.io/docs/docs/codefresh-yaml/steps/git-clone/
    title: "Clone repository"
    type: git-clone
    stage: Prepare
    description: "Clone repository"
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    git: github
    revision: ${{CF_REVISION}}

  set_stage:
    title: "Set stage"
    stage: Prepare
    image: alpine
    commands:
      - cf_export STAGE=preview

  set_codefresh_variables:
    title: "Set Codefresh variables"
    stage: Build
    image: alpine
    commands:
      - "[ ! -f ./codefresh/defaults.env ] ||  cat ./codefresh/defaults.env | tee -a ${{CF_VOLUME_PATH}}/env_vars_to_export"
      - "[ ! -f ./codefresh/${{STAGE}}.env ] || cat ./codefresh/${{STAGE}}.env | tee -a ${{CF_VOLUME_PATH}}/env_vars_to_export"

  export:
    title: "Export environment"
    stage: Prepare
    image: alpine
    commands:
      - cf_export NAMESPACE=pr-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}
      - cf_export APP_NAME=${{CF_REPO_NAME}}
      - cf_export APP_SCHEME=https
      - cf_export CF_BUILD_DATE_TIME=$(date +"%Y-%m-%d/%H:%M:%S" -d @$((${{CF_BUILD_TIMESTAMP}}/1000)))
      - cf_export APP_HOST=pr-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}.${{BASE_HOST}}

      # Docker image name and tag for Kubernetes to pull the image from (used as ENV vars in the helmfile)
      # ECR_BASE_NAME is set as a shared environment variable in Codefresh
      - cf_export IMAGE_NAME=${{ECR_BASE_NAME}}/${{CF_REPO_NAME}}
      - cf_export IMAGE_TAG=${{CF_REVISION}}

  show_context:
    title: "Show context"
    stage: Prepare
    image: alpine
    commands:
      - |-
        echo "Repo owner: $CF_REPO_OWNER"
        echo "Repo name: $CF_REPO_NAME"
        echo "Branch: $CF_BRANCH"
        echo "Release tag: $CF_RELEASE_TAG"
        echo "Commit URL: $CF_COMMIT_URL"
        echo "Commit message: $CF_COMMIT_MESSAGE"
        echo "Commit author: $CF_COMMIT_AUTHOR"
        echo "Revision: $CF_REVISION"
        echo "Short revision: $CF_SHORT_REVISION"
        echo "Pull Request action: $CF_PULL_REQUEST_ACTION"
        echo "Stage: $STAGE"
        echo "Namespace: $NAMESPACE"
        echo "App host: $APP_HOST"

  build:
    type: parallel
    stage: Build
    steps:
      build_image:
        title: "Build Docker image"
        type: build
        description: "Build Docker image"
        image_name: ${{CF_REPO_NAME}}
        tag: ${{CF_SHORT_REVISION}}
        dockerfile: Dockerfile
        no_cache: false
        no_cf_cache: false

      build_test:
        title: "Build test Docker image"
        type: build
        description: "Build test Docker image"
        dockerfile: Dockerfile
        image_name: ${{CF_REPO_NAME}}
        tag: ${{CF_SHORT_REVISION}}-test
        when:
          condition:
            all:
              testsEnabled: "'${{INTEGRATION_TESTS_ENABLED}}' == 'true'"

  test:
    title: "Run tests"
    stage: Test
    type: composition
    fail_fast: true
    # Run the docker-composition defined in the file
    composition: codefresh/test/docker-compose.yml
    # Run tests against the composition
    composition_candidates:
      app:
        image: ${{build_test}}
        entrypoint: /bin/sh -c
        command: codefresh/test/test.sh
        env_file:
          - codefresh/test/test.env
        volumes:
          - '${{CF_VOLUME_NAME}}:${{CF_VOLUME_PATH}}'
        working_dir: '${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}'
    when:
      condition:
        all:
          testsEnabled: "'${{INTEGRATION_TESTS_ENABLED}}' == 'true'"

  set_github_deployment_status_to_pending:
    title: Set GitHub deployment status to "pending"
    stage: Deploy
    image: cloudposse/github-status-updater
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=${{STAGE}}/env
      - GITHUB_STATE=pending
      - GITHUB_DESCRIPTION=Deploying changes to ${{NAMESPACE}} namespace
      - GITHUB_TARGET_URL=${{APP_SCHEME}}://${{APP_HOST}}
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"
          githubNotificationsEnabled: "'${{GITHUB_NOTIFICATIONS_ENABLED}}' == 'true'"

  push_image_commit:
    title: "Push image with commit SHA tag"
    stage: Deploy
    type: push
    registry: ecr
    candidate: ${{build_image}}
    tags:
      - "${{CF_REVISION}}"

  wait:
    title: "Wait"
    stage: Deploy
    image: codefresh/cli:latest
    commands:
      - codefresh get builds --pipeline=destroy --pipeline=preview --branch=${{CF_BRANCH}} --status running --limit 1000 -o json | jq --arg id ${{CF_BUILD_ID}} -ser 'flatten|.[-1].id==$id'
    retry:
      maxAttempts: 10
      delay: 20
      exponentialFactor: 1.1
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"

  deploy_helmfile:
    title: "Deploy with helmfile"
    stage: Deploy
    image: ${{build_image}}
    working_directory: /deploy/
    commands:
      - echo 'Deploying ${{CF_REPO_NAME}}:${{CF_REVISION}} to namespace ${{NAMESPACE}}'
      - apk add --update curl make bash git kubectl@cloudposse helm@cloudposse helmfile@cloudposse
      - kubectl config use-context ${{KUBE_CONTEXT}}
      # Deploy to the cluster in the namespace
      - helmfile --namespace ${{NAMESPACE}} sync
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"

  set_github_deployment_status_to_success:
    title: Set GitHub deployment status to "success"
    stage: Deploy
    image: cloudposse/github-status-updater
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=${{STAGE}}/env
      - GITHUB_STATE=success
      - GITHUB_DESCRIPTION=Deployed to ${{NAMESPACE}} by @${{CF_BUILD_INITIATOR}}
      - GITHUB_TARGET_URL=${{APP_SCHEME}}://${{APP_HOST}}
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"
          githubNotificationsEnabled: "'${{GITHUB_NOTIFICATIONS_ENABLED}}' == 'true'"

  send_slack_notification:
    title: "Send notification to Slack channel"
    stage: Deploy
    image: cloudposse/build-harness
    working_directory: /build-harness
    environment:
      - SLACK_WEBHOOK_URL=${{SLACK_WEBHOOK_URL}}
      - APP_HOST="${{APP_SCHEME}}://${{APP_HOST}}"
      - PIPELINE_ENV=${{STAGE}}
      - PIPELINE_ACTION=deploy
      - CHART_NAME=${{CF_REPO_NAME}}
      - CF_BUILD_URL=${{CF_BUILD_URL}}
      - CF_REPO_OWNER=${{CF_REPO_OWNER}}
      - CF_REPO_NAME=${{CF_REPO_NAME}}
      - CF_BUILD_TIMESTAMP=${{CF_BUILD_TIMESTAMP}}
      - CF_BUILD_TRIGGER=${{CF_BUILD_TRIGGER}}
      - GIT_COMMIT_SHORT=${{CF_SHORT_REVISION}}
      - GIT_COMMIT_URL=${{CF_COMMIT_URL}}
      - GIT_COMMIT_MESSAGE=${{CF_COMMIT_MESSAGE}}
      - GIT_COMMIT_AUTHOR=${{CF_COMMIT_AUTHOR}}
      - GIT_BRANCH_TAG=${{CF_BRANCH_TAG_NORMALIZED}}
    commands:
      - make codefresh/notify/slack/deploy/webapp GIT_COMMIT_TIMESTAMP=$((${{CF_BUILD_TIMESTAMP}}/1000))
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"
          slackNotificationsEnabled: "'${{SLACK_NOTIFICATIONS_ENABLED}}' == 'true'"

  add_url_to_comment_on_commit:
    title: "Comment on commit with the deployed URL"
    stage: Deploy
    image: cloudposse/github-commenter
    environment:
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_COMMENT_TYPE=commit
      - GITHUB_COMMIT_SHA=${{CF_SHORT_REVISION}}
      - 'GITHUB_COMMENT=Version ${{CF_SHORT_REVISION}} deployed by @${{CF_BUILD_INITIATOR}} to the [`${{NAMESPACE}}`](${{APP_SCHEME}}://${{APP_HOST}}) namespace on `${{STAGE}}` at ${{CF_BUILD_DATE_TIME}}<details>![:thumbsup:](https://cloudposse.com/urand/familyguy.gif)</details>'
    when:
      condition:
        all:
          deployLabel: "match('${{CF_PULL_REQUEST_LABELS}}', 'deploy', false) == true"
          githubNotificationsEnabled: "'${{GITHUB_NOTIFICATIONS_ENABLED}}' == 'true'"
